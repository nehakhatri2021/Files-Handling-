# -*- coding: utf-8 -*-
"""Functions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QA-tHm5WHExL2_MckIvJDNRofPISAppx
"""



"""### **1. What is the difference between a function and a method in Python?**

* **Function**: A block of code that performs a specific task and is defined using `def`.
* **Method**: A function that is associated with an object and is called using the object (typically used in classes).

**Example**:

```python
def greet():  # Function
    print("Hello!")

"hello".upper()  # Method (called on a string object)
```

---

### **2. Explain the concept of function arguments and parameters in Python.**

* **Parameters**: Variables listed in a function definition.
* **Arguments**: Actual values passed to the function when it is called.

**Example**:

```python
def greet(name):  # 'name' is a parameter
    print("Hello", name)

greet("Alice")  # "Alice" is the argument
```

---

### **3. What are the different ways to define and call a function in Python?**

**Ways to define**:

* Using `def` keyword
* Using `lambda` for anonymous functions

**Ways to call**:

* Direct call: `func()`
* With arguments: `func(arg1)`
* Using unpacking: `func(*args, **kwargs)`

**Example**:

```python
def add(a, b):
    return a + b

print(add(2, 3))  # Direct call
```

---

### **4. What is the purpose of the `return` statement in a Python function?**

* It ends the function execution and sends a value back to the caller.

**Example**:

```python
def square(x):
    return x * x

print(square(4))  # Output: 16
```

---

### **5. What are iterators in Python and how do they differ from iterables?**

* **Iterable**: Any object that can return an iterator (e.g., list, string).
* **Iterator**: An object with `__next__()` and `__iter__()` methods.

**Example**:

```python
lst = [1, 2, 3]  # Iterable
it = iter(lst)   # Iterator

print(next(it))  # Output: 1
```

---

### **6. Explain the concept of generators in Python and how they are defined.**

* Generators are iterators that yield items one at a time using the `yield` keyword.
* They do not store the entire sequence in memory.

**Example**:

```python
def countdown(n):
    while n > 0:
        yield n
        n -= 1
```

---

### **7. What are the advantages of using generators over regular functions?**

* **Memory efficient**: They yield values one by one.
* **Faster for large data**: Avoids loading everything into memory.
* **Lazy evaluation**: Compute values only when needed.

**Example**:

```python
def gen():
    yield 1
    yield 2
```

---

### **8. What is a lambda function in Python and when is it typically used?**

* An anonymous (unnamed) function defined using the `lambda` keyword.
* Used for short, simple functions.

**Example**:

```python
square = lambda x: x * x
print(square(3))  # Output: 9
```

---

### **9. Explain the purpose and usage of the `map()` function in Python.**

* Applies a function to each item in an iterable and returns a new iterable.

**Example**:

```python
nums = [1, 2, 3]
squares = list(map(lambda x: x*x, nums))
print(squares)  # Output: [1, 4, 9]
```

---

### **10. What is the difference between `map()`, `reduce()`, and `filter()` functions in Python?**

* `map()`: Applies a function to all items.
* `filter()`: Filters items based on a condition.
* `reduce()`: Applies a function cumulatively (requires `functools`).

**Example**:

```python
from functools import reduce

nums = [1, 2, 3, 4]
print(list(map(lambda x: x*2, nums)))       # [2, 4, 6, 8]
print(list(filter(lambda x: x%2==0, nums))) # [2, 4]
print(reduce(lambda x, y: x+y, nums))       # 10
```

### **1. Sum of all even numbers in a list**

```python
def sum_even_numbers(lst):
    return sum(num for num in lst if num % 2 == 0)

# Example
print(sum_even_numbers([1, 2, 3, 4, 5, 6]))  # Output: 12
```

---

### **2. Reverse a string**

```python
def reverse_string(s):
    return s[::-1]

# Example
print(reverse_string("hello"))  # Output: "olleh"
```

---

### **3. Squares of each number in a list**

```python
def square_list(lst):
    return [x ** 2 for x in lst]

# Example
print(square_list([1, 2, 3]))  # Output: [1, 4, 9]
```

---

### **4. Check if a number is prime (1 to 200)**

```python
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5)+1):
        if n % i == 0:
            return False
    return True

# Example
print(is_prime(29))  # Output: True
print(is_prime(100)) # Output: False
```

---

### **5. Fibonacci sequence iterator class**

```python
class Fibonacci:
    def __init__(self, n):
        self.n = n
        self.a, self.b, self.count = 0, 1, 0

    def __iter__(self):
        return self

    def __next__(self):
        if self.count >= self.n:
            raise StopIteration
        self.a, self.b = self.b, self.a + self.b
        self.count += 1
        return self.a

# Example
for num in Fibonacci(5):
    print(num, end=' ')  # Output: 1 1 2 3 5
```

---

### **6. Generator for powers of 2**

```python
def powers_of_two(max_exp):
    for i in range(max_exp + 1):
        yield 2 ** i

# Example
for num in powers_of_two(4):
    print(num, end=' ')  # Output: 1 2 4 8 16
```

---

### **7. Generator to read file line by line**

```python
def read_file_lines(filename):
    with open(filename, 'r') as file:
        for line in file:
            yield line.strip()

# Example usage (Assumes 'example.txt' exists)
# for line in read_file_lines("example.txt"):
#     print(line)
```

---

### **8. Lambda function to sort list of tuples by 2nd element**

```python
tuples = [(1, 3), (4, 1), (2, 2)]
sorted_tuples = sorted(tuples, key=lambda x: x[1])

# Example
print(sorted_tuples)  # Output: [(4, 1), (2, 2), (1, 3)]
```

---

### **9. Use `map()` to convert Celsius to Fahrenheit**

```python
celsius = [0, 20, 30, 40]
fahrenheit = list(map(lambda c: (c * 9/5) + 32, celsius))

# Example
print(fahrenheit)  # Output: [32.0, 68.0, 86.0, 104.0]
```

---

### **10. Use `filter()` to remove vowels from a string**

```python
def remove_vowels(s):
    return ''.join(filter(lambda ch: ch.lower() not in 'aeiou', s))

# Example
print(remove_vowels("Hello World"))  # Output: "Hll Wrld"
```
"""