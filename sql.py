# -*- coding: utf-8 -*-
"""sql.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hXBisptIuC04oBE3UIkmo9EoQ6xeMEyi

### **1. SQL Query to Create `employees` Table**

```sql
CREATE TABLE employees (
    emp_id INTEGER PRIMARY KEY NOT NULL,
    emp_name TEXT NOT NULL,
    age INTEGER CHECK (age >= 18),
    email TEXT UNIQUE,
    salary DECIMAL DEFAULT 30000
);
```

**Explanation:**

* `PRIMARY KEY` implies `NOT NULL` and uniqueness.
* `CHECK (age >= 18)` ensures age constraint.
* `UNIQUE` ensures no two employees have the same email.
* `DEFAULT 30000` assigns a default salary if not provided.

---

### **2. Purpose of Constraints & Common Types**

**Purpose of Constraints:**
Constraints enforce rules on the data in tables to ensure **accuracy**, **validity**, and **consistency**, which is critical for **data integrity** in a database.

**Common Types of Constraints:**

* **NOT NULL**: Ensures a column cannot have NULL values.

  * Example: `emp_name TEXT NOT NULL`
* **UNIQUE**: Ensures all values in a column are different.

  * Example: `email TEXT UNIQUE`
* **PRIMARY KEY**: Combines `NOT NULL` and `UNIQUE` to uniquely identify each row.
* **FOREIGN KEY**: Ensures referential integrity by linking to a primary key in another table.
* **CHECK**: Ensures data meets a specific condition.

  * Example: `CHECK (age >= 18)`
* **DEFAULT**: Sets a default value if no value is provided.

  * Example: `salary DECIMAL DEFAULT 30000`

---

### **3. Why Use NOT NULL? Can a Primary Key Be NULL?**

* **NOT NULL**: Prevents missing or incomplete data in crucial columns.

  * Example: You want every employee to have a name, so `emp_name TEXT NOT NULL`.

* **Primary Key and NULL:**

  * A **primary key cannot contain NULL values**.
  * Reason: A primary key uniquely identifies each row, and NULL represents "unknown", which would violate uniqueness and reliability.

---

### **4. Adding & Removing Constraints**

#### **Add Constraint:**

To add a `CHECK` constraint after table creation:

```sql
ALTER TABLE employees
ADD CONSTRAINT chk_age CHECK (age >= 18);
```

#### **Remove Constraint:**

To drop a constraint (name must be known):

```sql
ALTER TABLE employees
DROP CONSTRAINT chk_age;
```

> Note: Constraint names must be known or defined explicitly to be removed. You can name constraints when creating them:

```sql
age INTEGER CONSTRAINT chk_age CHECK (age >= 18)
```

---

### **5. Consequences of Violating Constraints**

If a data operation violates a constraint, the database throws an **error** and prevents the operation.

#### **Examples:**

* Inserting an employee with NULL `emp_name` (violates `NOT NULL`):

```sql
INSERT INTO employees (emp_id, emp_name, age, email) VALUES (1, NULL, 25, 'abc@example.com');
```

**Error Message:**

```
ERROR: null value in column "emp_name" violates not-null constraint
```

* Inserting duplicate email (violates `UNIQUE`):

```sql
INSERT INTO employees (emp_id, emp_name, age, email) VALUES (2, 'John', 28, 'abc@example.com');
```

**Error Message:**

```
ERROR: duplicate key value violates unique constraint "employees_email_key"
```

-- 1. Add PRIMARY KEY constraint to product_id
ALTER TABLE products
ADD CONSTRAINT pk_product_id PRIMARY KEY (product_id);

-- 2. Set DEFAULT value of 50.00 for price
ALTER TABLE products
ALTER COLUMN price SET DEFAULT 50.00;
 Explanation
ADD CONSTRAINT pk_product_id PRIMARY KEY (product_id);
Adds a primary key named pk_product_id on the product_id column. This will also make the column NOT NULL implicitly.

ALTER COLUMN price SET DEFAULT 50.00;
Sets a default value for the price column so that if no value is provided during insertion, it defaults to 50.00.

ques Write a query to fetch the student_name and class_name for each student using an INNER JOIN.

SELECT
    students.student_name,
    classes.class_name


FROM
    students
INNER JOIN
    classes
ON
    students.class_id = classes.class_id;
"""