# -*- coding: utf-8 -*-
"""decision tree.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wRkHDtn7-HVt7CWDOBFuMvu3Zz5nHGlP
"""

from google.colab import files

uploaded= files.upload()

from google.colab import files
import pandas as pd
dataset= pd.read_csv('diabetes.csv')

dataset

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

wf = dataset.copy()

wf

wf.info()

wf.isnull()

wf.isnull().sum()

wf.index

wf.columns

row_index= np.random.choice(wf.index)

row_index

columns_index= np.random.choice(wf.columns)

columns_index

wf.loc[row_index,columns_index]=np.nan

wf.isnull().sum()

wf.isnull().sum().sort_values(ascending=False)

wf['Outcome'].fillna(wf['Outcome'].mean(),inplace=True)

wf.isnull().sum()

#visulation
wf.plot(kind='density',subplots=True,layout=(3,3),sharex=True)
plt.show()

#visulation
wf.plot(kind='density',subplots=True,layout=(3,3),sharex=False)
plt.show()

wf

df = dataset.copy()

df

#df.iloc[starting:ending,starting:ending]   first is for rows and second is for columns
df.iloc[5:11,3:7]

df.iloc[759:768,6:9]

df.iloc[-9,:-3]

from sklearn.model_selection import train_test_split

X=df.iloc[:,:-1]
y=df.iloc[:,-1:]

X_train, X_test, y_train, y_test = train_test_split(X ,y, test_size=0.2, random_state=42)

X_train.shape

y_train.shape

y_train

X_test.shape

y_test.shape

# Decision Tree
from sklearn.tree import DecisionTreeClassifier

classifer= DecisionTreeClassifier(criterion='entropy',random_state=3)

classifer.fit(X_train,y_train)

y_pred = classifer.predict(X_test)

y_pred

y_pred.shape

#confusion matrix
from sklearn.metrics import confusion_matrix

cm= confusion_matrix(y_test,y_pred)
print('confusion matrix')
print(cm)

print('TN = ',cm[0][0])
print('FP = ',cm[0][1])
print('FN = ',cm[1][0])
print('TP = ',cm[1][1])

#printing the values of cm using fro loop
for i in range(len(cm)):
  for j in range(len(cm)):
    print(cm[i][j])

#accuracy score
from sklearn.metrics import accuracy_score

print('Accuracy: ','%2f'%(accuracy_score(y_test,y_pred)))

from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import confusion_matrix
from sklearn.metrics import precision_score, recall_score, f1_score, accuracy_score
import matplotlib.pyplot as plt
print('Precision: %.3f' % precision_score(y_test, y_pred))

print('Recall: %.3f' % recall_score(y_test, y_pred))

print('F1 Score: %.3f' % f1_score(y_test, y_pred))

precision=cm[1][1]/(cm[0][1]+cm[1][1])

precision

#recall=tp/(fn+tp)

recall=cm[1][1]/(cm[1][0]+cm[1][1])
recall

#F1 Score = 2* Precision Score * Recall Score/ (Precision Score + Recall Score/)

f1score=2*precision*recall/(precision+recall)
f1score

